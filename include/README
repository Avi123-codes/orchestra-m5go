Orchestra on ESP32 (M5Stack Core)

This project turns multiple ESP32-based devices (M5Stack Core) into a distributed orchestra.
Each device is assigned a role (Conductor or Performer Part 1–4). Together they synchronize playback of a song, with per-device parts or frequency transforms to create harmony.

The Conductor never plays audio—it only broadcasts sync messages. Performers play their assigned role’s part and show role-specific animations.

Roles

ROLE_CONDUCTOR

Silent (no sound output)

Displays an idle screen

Handles button input to start/stop/skip songs

Broadcasts control messages to all performers over ESP-NOW

ROLE_PART_1 ... ROLE_PART_4

Performers that play actual notes

Each role may play original melody, octave shifts, or harmonized parts

Display animations are colored according to role

Display

Idle screen: Solid blue background until playback starts.

During playback: A lightweight equalizer animation pulses with each note. Colors match the device’s role:

Part 1 → Green

Part 2 → Yellow

Part 3 → Cyan/Blue

Part 4 → Orange

Conductor → Purple (but conductor stays idle)

The display system is optimized for minimal RAM devices: only a single scanline buffer is used.

Audio

I²S DAC output on pin 25 (M5Stack Core built-in speaker).

Sample rate: 44.1kHz.

Each note is generated as a sine wave.

Parts can be explicitly defined in a song, or automatically transformed from the main melody.

Building & Flashing

The role of each device is selected at build time.

Conductor
pio run -e conductor -t upload
pio device monitor -e conductor --baud 115200

Performers
pio run -e part1 -t upload
pio run -e part2 -t upload
pio run -e part3 -t upload
pio run -e part4 -t upload


If your device is on a different port:

pio run -e part2 -t upload --upload-port COM8

Button Controls (Conductor only)

A (left) → STOP playback

B (middle) → Toggle play/stop current song

C (right) → Next song

Performers ignore button presses.

Project Structure
src/
  main.c           # Conductor/performer entry point
  audio.c          # Audio playback (I²S, sine wave generator, role transforms)
  display.c        # Display driver and idle screen
  display_animations.c  # Low-RAM equalizer animation
  device_config.c  # Role setup and config persistence
  orchestra.c      # High-level orchestration logic
  songs.c/.h       # Song definitions and parts
include/
  *.h              # Shared headers across modules

Sync

Devices synchronize playback over ESP-NOW.

Timing jitter is under ~10 ms → “good enough” for musical ensemble playback.

Listeners won’t notice drift unless playing very percussive tracks.

Next Steps

Add more songs with explicit per-part melodies.

Improve bar-synchronized start (for even tighter sync).

Experiment with different display animations.